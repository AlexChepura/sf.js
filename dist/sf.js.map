{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/es6-promise/dist/es6-promise.js","node_modules/process/browser.js","src/core/Ajax.js","src/core/BaseDOMConstructor.js","src/core/DomMutations.js","src/core/Events.js","src/core/InstancesController.js","src/core/ajax/baseActions.js","src/core/events/baseEvents.js","src/helpers/DOMEvents.js","src/helpers/LikeFormData.js","src/helpers/domTools.js","src/helpers/tools.js","src/index.js","src/sf.js","src/shim/Object.assign.js","src/shim/console.js"],"names":[],"mappingsjopLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnvxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sf.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   3.3.1\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = undefined;\nvar customSchedulerFn = undefined;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  return function () {\n    vertxNext(flush);\n  };\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var _arguments = arguments;\n\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n  if (_state) {\n    (function () {\n      var callback = _arguments[_state - 1];\n      asap(function () {\n        return invokeCallback(_state, child, callback, parent._result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(16);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        _resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      _reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      _reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    _reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return _resolve(promise, value);\n    }, function (reason) {\n      return _reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      _reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction _resolve(promise, value) {\n  if (promise === value) {\n    _reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction _reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      _reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      _resolve(promise, value);\n    } else if (failed) {\n      _reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      _reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      _resolve(promise, value);\n    }, function rejectPromise(reason) {\n      _reject(promise, reason);\n    });\n  } catch (e) {\n    _reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction Enumerator(Constructor, input) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop);\n\n  if (!this.promise[PROMISE_ID]) {\n    makePromise(this.promise);\n  }\n\n  if (isArray(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._result = new Array(this.length);\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    _reject(this.promise, validationError());\n  }\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var _input = this._input;\n\n  for (var i = 0; this._state === PENDING && i < length; i++) {\n    this._eachEntry(_input[i], i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve$$ = c.resolve;\n\n  if (resolve$$ === resolve) {\n    var _then = getThen(entry);\n\n    if (_then === then && entry._state !== PENDING) {\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof _then !== 'function') {\n      this._remaining--;\n      this._result[i] = entry;\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, _then);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve$$) {\n        return resolve$$(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve$$(entry), i);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (state === REJECTED) {\n      _reject(promise, value);\n    } else {\n      this._result[i] = value;\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  _reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {function} resolver\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver) {\n  this[PROMISE_ID] = nextId();\n  this._result = this._state = undefined;\n  this._subscribers = [];\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve;\nPromise.reject = reject;\nPromise._setScheduler = setScheduler;\nPromise._setAsap = setAsap;\nPromise._asap = asap;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we're unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfilled\n    @param {Function} onRejected\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn't find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection) {\n    return this.then(null, onRejection);\n  }\n};\n\nfunction polyfill() {\n    var local = undefined;\n\n    if (typeof global !== 'undefined') {\n        local = global;\n    } else if (typeof self !== 'undefined') {\n        local = self;\n    } else {\n        try {\n            local = Function('return this')();\n        } catch (e) {\n            throw new Error('polyfill failed because global object is unavailable in this environment');\n        }\n    }\n\n    var P = local.Promise;\n\n    if (P) {\n        var promiseToString = null;\n        try {\n            promiseToString = Object.prototype.toString.call(P.resolve());\n        } catch (e) {\n            // silently ignored\n        }\n\n        if (promiseToString === '[object Promise]' && !P.cast) {\n            return;\n        }\n    }\n\n    local.Promise = Promise;\n}\n\npolyfill();\n// Strange compat..\nPromise.polyfill = polyfill;\nPromise.Promise = Promise;\n\nreturn Promise;\n\n})));\n//# sourceMappingURL=es6-promise.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\r\n\r\nvar tools = require(\"../helpers/tools\");\r\nvar Events = require(\"../core/Events\");\r\nvar LikeFormData = require(\"../helpers/LikeFormData\");\r\n/**\r\n * This is an Ajax transport.\r\n * Supports  XDomainRequest for old IE\r\n * @param {Object} [options]\r\n * @param {Object} [options.headers] Headers to add to the instance\r\n * @fires beforeSend event that will be performed before request is send. Event called with one parameter \"options\", that contains all variables for Ajax\r\n * @constructor\r\n */\r\nvar Ajax = function (options) {\r\n    this.currentRequests = 0;\r\n    this.events = new Events([\"beforeSend\", 'load']);\r\n\r\n    if (options && options.headers) {\r\n        this.headers = Object.assign(this.headers, options.headers);\r\n    }\r\n};\r\n\r\n/**\r\n * Default headers. You can overwrite it. Look at the event beforeSend\r\n * Please note that on XDomainRequest  we can't send any headers.\r\n * @type Object\r\n */\r\nAjax.prototype.headers = {\r\n    'X-Requested-With': 'XMLHttpRequest'\r\n};\r\n\r\n/**\r\n * Send ajax request to server\r\n * Will return promise or array with promise and XMLHttpRequest : {window.Promise|[window.Promise,XMLHttpRequest]}\r\n * @since 0.4.0\r\n * @param {Object} options object with options\r\n * @param {String} options.url url to send data\r\n * @param {Object|String} [options.data] data to send\r\n * @param {String} [options.method]\r\n * @param {Object} [options.headers] headers to add to the request\r\n * @param {Function} [options.onProgress] callback function on progress. Two callback options: current bytes sent,totalBytes\r\n * @param {Function} [options.isReturnXHRToo===false] should method return array instead of Promise. Some times is needed to control ajax (abort, etc). If tree then  [window.Promise,XMLHttpRequest ] will be returned\r\n * @returns {Promise|Array}\r\n */\r\nAjax.prototype.send = function (options) {\r\n    var that = this;\r\n\r\n    //TODO why we check here if data === null then reassign to null again?\r\n    if (options.data === null || options.data === void 0 || options.data === 'undefined') {\r\n        options.data = null;\r\n    }\r\n    if (!options.method) {\r\n        options.method = \"POST\"\r\n    }\r\n\r\n    options.headers = options.headers ? Object.assign(options.headers, this.headers, options.headers) : Object.assign({}, this.headers);\r\n    var xhr;\r\n    var ajaxPromise =  new Promise(function (resolve, reject) {    // Return a new promise.\r\n        if (!options.url) {\r\n            console.error(\"You should provide url\");\r\n            reject(\"You should provide url\");\r\n        }\r\n        that.currentRequests++;\r\n\r\n        var oldIE = false;\r\n\r\n        if ((typeof window !== 'undefined') && window.XDomainRequest && (window.XMLHttpRequest && new XMLHttpRequest().responseType === undefined) && (url.indexOf(\"http\") === 0)) {//old IE CORS\r\n            //TODO maybe we should use XDomainRequest only for cross domain requests? But  Spiral for now works great with XDomainRequest (based on IEJSON)\r\n            xhr = new XDomainRequest();\r\n            //http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\r\n            oldIE = true;\r\n            //http://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\r\n            xhr.onprogress = function (e) {\r\n                //TODO adjust options\r\n                options.onProgress && options.onProgress(e);\r\n            };\r\n        } else {\r\n            xhr = new XMLHttpRequest();\r\n            if (options.onProgress) {\r\n                xhr.upload.addEventListener(\"progress\", function (event) {\r\n                    if (event.lengthComputable) {\r\n                        options.onProgress(event.loaded, event.total);\r\n                    }\r\n                }, false);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        xhr.open(options.method, options.url);\r\n\r\n        xhr.onload = function () {//On loaded\r\n            that.currentRequests--;\r\n            var ans = that._parseJSON(xhr);\r\n            if (ans.status) {\r\n                if (ans.status > 199 && ans.status < 300) {//200-299\r\n                    resolve(ans);\r\n                } else if (ans.status > 399 && ans.status < 600) {//400-599\r\n                    reject(ans);\r\n                } else {\r\n                    console.error(\"unknown status %d. Rejecting\", ans.status);\r\n                    reject(ans);\r\n                }\r\n\r\n            } else if (oldIE) {\r\n                resolve(ans);//OLD IE + downloading file is producing  no status.\r\n            } else {\r\n                reject(ans);//reject with the status text\r\n            }\r\n            options.response = ans;\r\n            that.events.trigger(\"load\", options);//for example - used to handle actions\r\n        };\r\n        xhr.onerror = function () {// Handle network errors\r\n            that.currentRequests--;\r\n            reject(Error(\"Network Error\"), xhr);\r\n        };\r\n\r\n        that.events.trigger(\"beforeSend\", options);//you can modify \"options\" object inside event (like adding you headers,data,etc)\r\n\r\n        var dataToSend;\r\n        if (options.data !== null) {//if data to send is not empty\r\n            if (!oldIE) {\r\n                if (options.data.toString().indexOf(\"FormData\") !== -1) {//if form data\r\n                    dataToSend = options.data;\r\n                } else {\r\n                    dataToSend = new LikeFormData(options.data);\r\n                    options.headers[\"content-type\"] = dataToSend.getContentTypeHeader();\r\n                }\r\n                that._setHeaders(xhr, options.headers);\r\n\r\n            } else {\r\n                dataToSend = \"IEJSON\" + JSON.stringify(options.data);\r\n            }\r\n        } else {//else send empty data\r\n            dataToSend = null;\r\n        }\r\n\r\n\r\n//        if (!oldIE) {\r\n//            //xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n//            dataToSend = new spiral.LikeFormData(data, xhr, oldIE);\r\n//        } else {\r\n//            if (data !==null && data !== void 0 && data !== 'undefined'){\r\n//                dataToSend = \"IEJSON\"+JSON.stringify(data);\r\n//            } else {\r\n//                 dataToSend =data;\r\n//            }\r\n//\r\n//        }\r\n\r\n\r\n        try {//working around FF bug\r\n            xhr.send(dataToSend);// Make the request\r\n        } catch (e) {\r\n            //console.error(\"error sending trying another method\");\r\n            xhr.send(dataToSend.toString());\r\n        }\r\n\r\n        return xhr;\r\n    });\r\n\r\n    if (options.isReturnXHRToo){//return xhr too\r\n        return [ajaxPromise,xhr]\r\n    }\r\n    return ajaxPromise;\r\n};\r\n\r\n/**\r\n * Iterate over headers object and call xhr.setRequestHeader\r\n * @param {XMLHttpRequest} xhr\r\n * @param {Object} headers object with headers to set\r\n */\r\nAjax.prototype._setHeaders = function (xhr, headers) {\r\n    for (var header in headers) {\r\n        xhr.setRequestHeader(header, headers[header]);\r\n    }\r\n\r\n};\r\n/**\r\n * Try to parse and normalize answer\r\n * @param xhr\r\n * @returns {*}\r\n * @private\r\n */\r\nAjax.prototype._parseJSON = function (xhr) {\r\n    if (!xhr.response) {\r\n        xhr.response = xhr.responseText;\r\n    }\r\n    var ret = {};\r\n    var contentType = false;\r\n    if (xhr.getResponseHeader) {\r\n        contentType = xhr.getResponseHeader(\"Content-Type\");\r\n    }\r\n\r\n    if (!contentType || contentType.toLowerCase() === 'application/json' || contentType.toLowerCase() === 'text/json' || contentType.toLowerCase() === 'inode/symlink') {//application/json or inode/symlink  (AmazonS3 bug? )\r\n        try {\r\n            ret = JSON.parse(xhr.response);\r\n        } catch (e) {\r\n            console.error(\"Not a JSON!\", xhr.response);\r\n            ret = {data: xhr.response};\r\n        }\r\n    } else {\r\n        ret = {data: xhr.response};\r\n    }\r\n\r\n    if (!ret.status) {\r\n        ret.status = xhr.status;\r\n    }\r\n    //Some servers can answer status in JSON as \"HTTP/1.1 200 OK\"  but we need a status number\r\n    if (typeof ret.status === 'string' && ret.status.indexOf(\"HTTP/\") === 0 && ret.status.match( / (\\d\\d\\d)/ )) {\r\n        ret.status = parseInt(ret.status.match( / (\\d\\d\\d)/ )[1]);//TODO check this code\r\n    }\r\n\r\n\r\n    if (!ret.statusText) {\r\n        ret.statusText = xhr.statusText;\r\n    }\r\n    if (xhr.status && xhr.status != ret.status) {\r\n        console.warn(\"Status from request %d, but response contains status %d\", xhr.status, ret.status)\r\n    }\r\n\r\n    return ret;\r\n\r\n};\r\n\r\n\r\nmodule.exports = Ajax;\r\n","\"use strict\";\r\n\r\n/**\r\n * This a base constructor (class) for any DOM based instance.\r\n * This constructor just grab all node attributes and generates options. All processed options stored at this.options\r\n * @example\r\n * We have html like this:\r\n * <div data-test=\"testValue\" data-value=\"value123\">.....</div>\r\n * this.options will be:\r\n * {\r\n *  test:\"testValue\",\r\n *  value:\"value\"\r\n * }\r\n * Note: data-test and data-value should be described in attributesToGrab\r\n * @constructor\r\n */\r\nvar BaseDOMConstructor = function () {\r\n};\r\n/**\r\n * Init method. Call after construct instance\r\n * @param {Object} sf\r\n * @param {Object} node  DomNode of form\r\n * @param {Object} [options] all options to override default\r\n */\r\nBaseDOMConstructor.prototype.init = function (sf, node, options) {\r\n    //TODO data-spiral-JSON\r\n    this.sf = sf;\r\n    this.node = node;\r\n    //if (sf.options && sf.options.instances && sf.options.instances[this.name]) {\r\n    //    options = Object.assign(options || {}, sf.options.instances[this.name]);\r\n    //}\r\n    this.options = Object.assign(this.grabOptions(node), options);\r\n};\r\n\r\n/**\r\n * This is a options to generate.\r\n * You should provide processor or value.\r\n * @type {Object}\r\n * @property {Object} propertyKey - object of property\r\n * @property {String} propertyKey.value - default value to return\r\n * @property {String} [propertyKey.domAttr] - dom attribute to grab data\r\n * @property {Function} [propertyKey.processor] -  processor to process data before return\r\n * @property {Object}  ... - Another object of one property\r\n * @type {{}}\r\n *  @example\r\n * \"someAttribute\": {// key\r\n *      value: true, //default Value\r\n *      domAttr: \"data-some-attribute\", // attribute from node to grab\r\n *      processor: function (node,val,self) { //processor to process values before return\r\n *          //some calculations\r\n *      return someValue;\r\n *      }\r\n *  },\r\n *  \"anotherAttribute\":{...},\r\n *  \"...\"\r\n *\r\n *  @example\r\n *  //return node as value\r\n *  \"context\": {\r\n *      \"processor\": function (node,val,key) { //processor\r\n *          return node;\r\n *      }\r\n *  },\r\n *  \"Another-key\":{...},\r\n *  \"...\"\r\n * @example\r\n * //Grab attribute \"data-attribute\" as \"MyAttribute\" if attribute not provided return \"DefaultValue\"\r\n * // Dom node <div data-attribute=\"someValue\"></div>\r\n * \"MyAttribute\": {\r\n *      value: \"DefaultValue\",\r\n *      domAttr: \"data-attribute\"\r\n *  }\r\n *  //after processing we should have\r\n *  {\"MyAttribute\":\"someValue\"}\r\n *\r\n *  @example\r\n * //Grab attribute \"data-attribute\" as \"MyAttribute\" and return some value instead\r\n * //Dom node  <div data-attribute=\"someValue\"></div>\r\n * \"MyAttribute\": {\r\n *      domAttr: \"data-attribute\",\r\n *      processor: function (node,val,self) {\r\n *          return val+\"SomeCalculation\";\r\n *      }\r\n *  }\r\n *  //after processing we should have\r\n *  {\"MyAttribute\":\"someValueSomeCalculation\"}\r\n *\r\n * @example\r\n * //return function as value\r\n * processAnswer: {\r\n *      \"value\": function (options) {\r\n *         return \"someVal\";\r\n *      }\r\n *  //after processing we should have\r\n *  {\"processAnswer\":function (options) {\r\n *         return \"someVal\";\r\n *      }\r\n *   }\r\n *\r\n * @example\r\n * //return init time as value\r\n * initTime: {\r\n *      \"processor\": function (node,val,self) {\r\n *         return new Date().getTime;\r\n *      }\r\n *  //after processing we should have\r\n *  {\"initTime\":1429808977404}\r\n * @example\r\n * //return other value instead of real one\r\n * processAnswer: {\r\n *      \"processor\": function (node,val,self) {\r\n *         return \"someVal\";\r\n *      }\r\n *  //after processing we should have\r\n *  {\"processAnswer\":\"someVal\"}\r\n */\r\nBaseDOMConstructor.prototype.optionsToGrab = {};\r\n\r\n/**\r\n * Grab all options that described in optionsToGrab\r\n * @param {Object} node domNode\r\n * @return {Object}\r\n */\r\nBaseDOMConstructor.prototype.grabOptions = function (node) {\r\n    var options = {};\r\n    var currentOptionValue;\r\n    var currentOption;\r\n    for (var option in this.optionsToGrab) {\r\n        currentOptionValue = null;\r\n        if (this.optionsToGrab.hasOwnProperty(option)) {//if this is own option\r\n            currentOption = this.optionsToGrab[option];\r\n            if (currentOption.hasOwnProperty(\"value\")) {//we have default option. Let's grab it for first\r\n                currentOptionValue = currentOption.value;\r\n            }\r\n\r\n            if (this.sf.options.instances[this.name] && this.sf.options.instances[this.name].hasOwnProperty(option)) {\r\n                currentOptionValue = this.sf.options.instances[this.name][option]\r\n            }\r\n\r\n            if (currentOption.hasOwnProperty(\"domAttr\") && node.attributes.hasOwnProperty(currentOption.domAttr)) {//we can grab the attribute of node\r\n                currentOptionValue = node.attributes[currentOption.domAttr].value;\r\n            }\r\n\r\n            if (currentOption.hasOwnProperty(\"processor\")) {//we have processor. Let's execute it\r\n                currentOptionValue = currentOption.processor.call(this, node, currentOptionValue, currentOption);\r\n            }\r\n\r\n            if (currentOptionValue !== null) {\r\n                options[option] = currentOptionValue;\r\n            }\r\n\r\n        }\r\n    }\r\n    return options;\r\n};\r\n\r\n/**\r\n * Get addon for instance\r\n * @param {String} addonType type of addon (message,fill,etc)\r\n * @param {String} addonName name of addon\r\n */\r\n//depricated\r\n//BaseDOMConstructor.prototype.getAddon = function (addonType, addonName) {\r\n//    return this.spiral.instancesController.getInstanceAddon(this.name, addonType, addonName);\r\n//};\r\n\r\nmodule.exports = BaseDOMConstructor;\r\n","\"use strict\";\r\n/**\r\n * Dom mutation. Listening to the DOM and add or remove instances based on classes.\r\n * @param {Object} instancesController  spiral instancesController.\r\n * @param {Function} instancesController.getClasses  get all registered modules classes.\r\n * @param {Function} instancesController.addInstance  add instance method.\r\n * @param {Function} instancesController.removeInstance  remove instance method\r\n * @constructor\r\n */\r\nvar DomMutations = function (instancesController) {\r\n    if (!instancesController){\r\n        console.error(\"You should provide instancesController  for DOM Mutation. Because DOM Mutation  should known all classes and\");\r\n        return;\r\n    }\r\n    if (!this.constructor){\r\n        console.error(\"Please call DomMutations with new  - 'new DomMutations()' \");\r\n        return;\r\n    }\r\n    this.instancesController = instancesController;\r\n    var config = {//config for MutationObserver\r\n            attributes: true,\r\n            childList: true,\r\n            characterData: true,\r\n            characterDataOldValue: true,\r\n            subtree: true,\r\n            attributeOldValue: true,\r\n            attributeFilter: [\"class\"]\r\n        },\r\n        that = this;\r\n    this.observer = new MutationObserver(function () {//call function when dom mutated.\r\n        that.onDomMutate.apply(that, arguments)\r\n    });\r\n    this.observer.observe(document, config);//start observer\r\n\r\n};\r\n/**\r\n * When dom mutated this function id executed.\r\n * @param {Array} mutations array of mutations\r\n * @returns {boolean}\r\n */\r\nDomMutations.prototype.onDomMutate = function (mutations) {\r\n    var classArray = this.instancesController.getClasses();//get all registered classes\r\n    var classSelector = \".\" + classArray.join(\",.\");//convert for querySelectorAll()\r\n    if (classSelector.length === 1) {//if not registered any instanceTypes\r\n        return false;\r\n    }\r\n    mutations.forEach(function (mutation) {//loop over mutation array\r\n        switch (mutation.type) {\r\n            case \"attributes\":\r\n                this.processMutationAttributes(mutation, classArray);\r\n                break;\r\n\r\n            case \"characterData\":\r\n\r\n                break;\r\n\r\n            case \"childList\":\r\n                this.processMutationChildList(mutation.addedNodes, \"addInstance\", classSelector, classArray);\r\n                this.processMutationChildList(mutation.removedNodes, \"removeInstance\", classSelector, classArray);\r\n                break;\r\n\r\n            case \"default\":\r\n                console.error(\"Something wrong. Contact tech support\");\r\n        }\r\n    }, this);\r\n    return true;\r\n};\r\n\r\n\r\n\r\nDomMutations.prototype.processMutationAttributes = function (mutation, classArray) {\r\n    var that = this;\r\n    var currentClasses = mutation.target.className.split(\" \"),\r\n        oldClasses = (mutation.oldValue)?mutation.oldValue.split(\" \"):[],\r\n        addedClasses = currentClasses.filter(function (val) {\r\n            return (oldClasses.indexOf(val) === -1);\r\n        }),\r\n        removedClasses = oldClasses.filter(function (val) {\r\n            return (currentClasses.indexOf(val) === -1);\r\n        }),\r\n        addedRegisteredClasses = addedClasses.filter(function (val) {\r\n            return (classArray.indexOf(val) !== -1);\r\n        }),\r\n        removedRegisteredClasses = removedClasses.filter(function (val) {\r\n            return (classArray.indexOf(val) !== -1);\r\n        });\r\n    removedRegisteredClasses.forEach(function (val) {\r\n        that.instancesController.removeInstance(that.instancesController.getInstanceNameByCssClass(val), mutation.target);\r\n    });\r\n    addedRegisteredClasses.forEach(function (val) {\r\n        that.instancesController.addInstance(that.instancesController.getInstanceNameByCssClass(val), mutation.target);\r\n    });\r\n\r\n};\r\n/**\r\n * Process mutation on ChildList\r\n * @param {NodeList} nodesList array with nodes\r\n * @param {String} action action to call (add or remove nodes)\r\n * @param {String} classSelector - string selector for querySelectorAll\r\n * @param {Array} classArray - array of all registered classes\r\n */\r\nDomMutations.prototype.processMutationChildList = function (nodesList, action, classSelector, classArray) {\r\n    var that =this;\r\n    /**\r\n     * Internal function for checking node class\r\n     * @param {Object} node dom node\r\n     */\r\n    function checkNode(node) {\r\n        classArray.forEach(function (className) {//loop over registered classes\r\n            if (node.classList.contains(className)) {//if class match try to add or remove instance for this node\r\n                that.instancesController[action](that.instancesController.getInstanceNameByCssClass(className), node);\r\n            }\r\n        });\r\n    }\r\n\r\n    [].forEach.call(nodesList, function (val) {//loop over mutation nodes\r\n        if (val.nodeType !== 1 || val.nodeName === \"SCRIPT\" || val.nodeName === \"LINK\") {//do not process other nodes then ELEMENT_NODE https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeType also ignore SCRIPT and LINK tag\r\n            return false;\r\n        }\r\n        checkNode(val);//check mutation node\r\n        [].forEach.call(val.querySelectorAll(classSelector), checkNode);//query all nodes with required classes and check it\r\n        return true;\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Stop listening the dom changes\r\n */\r\nDomMutations.prototype.stopObserve = function () {\r\n    this.observer.disconnect();\r\n};\r\n\r\nmodule.exports = DomMutations;\r\n\r\n\r\n","\"use strict\";\r\n\r\n/**\r\n * Events system.\r\n * @param {Array} allowedEvents array of allowed events.\r\n * @constructs Events\r\n * @example\r\n * //allow to work with all events\r\n * var events = new Events();\r\n * events.on(\"myBestEvent\",function(e){console.log(e)});\r\n * @example\r\n * //Allow to serve only limited events\r\n *  var events = new Events([\"beforeSubmit\",\"onDataReady\"]);\r\n *  events.on(\"myBestEvent\",function(e){console.log(e)});//will not works\r\n *  events.on(\"beforeSubmit\",function(e){console.log(e)});//will work\r\n */\r\nvar Events = function (allowedEvents) {\r\n    this._storage = {};\r\n    this._allowedEvents = allowedEvents;\r\n};\r\n\r\n/**\r\n * Add event(s)\r\n * @param {String} events event or space separated event list\r\n * @param {Function} callback callback function\r\n * @example\r\n * var events = new Events();\r\n * events.on(\"myBestEvent myBestEvent2 myBestEvent3\",function(e){console.log(e)});\r\n * events.on(\"myBestEvent\",function(e){console.log(e)});\r\n */\r\nEvents.prototype.on = function (events, callback) {\r\n    var eventArr = events.replace(/\\s{2,}/g, \" \").split(\" \");\r\n    eventArr.forEach(function(event){\r\n        if (this._allowedEvents  && this._allowedEvents.indexOf(event) === -1){// event not inside allowed events\r\n            console.warn(\"Events. Try to register event %s, but event is not allowed\",event);\r\n            return;\r\n        }\r\n        if (!this._storage.hasOwnProperty(events)) {\r\n            this._storage[event] = [];\r\n        }\r\n        this._storage[event].push(callback);\r\n    },this)\r\n\r\n};\r\n/**\r\n * Add action\r\n * @param {String} action\r\n * @param {Function} func\r\n * @deprecated  use \"on\" instead\r\n */\r\nEvents.prototype.registerAction = Events.prototype.on;\r\n\r\n\r\n/**\r\n * remove event\r\n * @param {String} event\r\n * @param {Function} callback\r\n */\r\nEvents.prototype.off = function (event, callback) {\r\n    alert(\"You try to remove action. This part is incomplete\");\r\n    //TODO\r\n};\r\n\r\n/**\r\n * Trigger event.\r\n * @param {String} event event name\r\n * @param {Object} [options] options to pass to the callback\r\n * @example\r\n * var events = new Events();\r\n * events.on(\"myBestEvent\",function(e){console.log(e.bestKey)});\r\n * events.trigger(\"myBestEvent\",{bestKey:42}); //will show in log\r\n */\r\nEvents.prototype.trigger = function (event, options) {\r\n    if (this._allowedEvents  && this._allowedEvents.indexOf(event) === -1){// event not inside allowed events\r\n        console.warn(\"Events. Try to trigger event %s, but event is not allowed\",event);\r\n        return;\r\n    }\r\n    if (this._storage.hasOwnProperty(event)) {\r\n        for (var n = 0, l = this._storage[event].length; n < l; n++) {\r\n            this._storage[event][n](options);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Perform action\r\n * @param {String} action\r\n * @param {Object} [actionParams] object with all action data from server\r\n * @param {Object} [options] ajax options\r\n * @deprecated use \"trigger\" instead\r\n */\r\nEvents.prototype.performAction = Events.prototype.trigger;\r\n\r\nmodule.exports = Events;","\"use strict\";\r\n\r\n/**\r\n * Instance controller\r\n * @param spiral\r\n * @constructor\r\n */\r\nvar InstancesController = function (spiral) {\r\n    this.spiral = spiral;\r\n    if (!this.constructor){\r\n        console.error(\"Please call InstancesController with new  - 'new InstancesController()' \");\r\n        return;\r\n    }\r\n    this._storage = {\r\n        instancesConstructors: {\r\n            cssClasses:{},\r\n            jsConstructors:{}\r\n        },\r\n        addons: {},\r\n        instances: {}\r\n    };\r\n\r\n    //todo decide if we need this\r\n    //[\"onAddInstance\", \"onRemoveInstance\"]\r\n    //this.events = new spiral.modules.core.Events();\r\n};\r\n/**\r\n * Register new instance type\r\n * @param {Function} constructorFunction - constructor function of instance\r\n * @param {String} [cssClassName] - css class name of instance. If class not provided that it can't be automatically controlled by DomMutation. But you still can use it from JS.\r\n * @param {Boolean} [isSkipInitialization=false]  - skip component initialization, just adding, no init nodes.\r\n */\r\nInstancesController.prototype.registerInstanceType = function (constructorFunction, cssClassName, isSkipInitialization) {\r\n    var instanceName = constructorFunction.prototype.name;\r\n\r\n    if (!instanceName){\r\n        console.error(\"Instance constructor should have name inside it\");\r\n    }\r\n\r\n    if (this._storage.instancesConstructors.jsConstructors.hasOwnProperty(instanceName)){\r\n        console.error(\"Instance Constructor for type '%s' already added. Skipping\",instanceName);\r\n        return;\r\n    }\r\n\r\n    if (cssClassName){//add link (cssClassName->instanceName)\r\n        this._storage.instancesConstructors.cssClasses[cssClassName] = instanceName;\r\n    }\r\n\r\n    this._storage.instancesConstructors.jsConstructors[instanceName] = constructorFunction;\r\n\r\n\r\n\r\n    // if (this._storage.instancesConstructors.hasOwnProperty(className)){\r\n    //    console.error(\"Instance Constructor for type %s already added. Skipping\",constructorFunction.prototype.name);\r\n    //    return;\r\n    //}\r\n    //this._storage.instancesConstructors[className] = {//init storage fields\r\n    //    \"typeName\": constructorFunction.prototype.name,\r\n    //    \"constructor\": constructorFunction\r\n    //};\r\n    this._storage.instances[instanceName] = [];\r\n    if (!isSkipInitialization){\r\n        var nodes = document.getElementsByClassName(cssClassName);//init add nodes with this class\r\n        for (var i = 0, max = nodes.length; i < max; i++) {\r\n            this.addInstance(instanceName, nodes[i]);\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Old method to register instance type\r\n * @param className\r\n * @param constructorFunction\r\n * @param isSkipInitialization\r\n * @deprecated\r\n */\r\nInstancesController.prototype.addInstanceType =function(className,constructorFunction, isSkipInitialization){\r\n    console.warn(\"addInstanceType is deprecated. Please use registerInstanceType instead\");\r\n    return this.registerInstanceType(constructorFunction, isSkipInitialization);\r\n};\r\n\r\n\r\n/**\r\n * Add instance\r\n * @param {String} instanceName - name of instance\r\n * @param {Object} node - dom node\r\n * @param {Object} [options] all options for send to the constructor\r\n * @returns {boolean}\r\n */\r\nInstancesController.prototype.addInstance = function (instanceName, node, options) {\r\n    var instanceConstructor = this._storage.instancesConstructors.jsConstructors[instanceName],\r\n        isAlreadyAdded = this.getInstance(instanceName,node);\r\n    if (!instanceConstructor || isAlreadyAdded) {//if not found this type  or already added - return\r\n        return false;\r\n    }\r\n//    console.log(\"Adding instance for type -\",instanceName,\". Node - \",node);\r\n    var instance = new instanceConstructor(this.spiral,node, options);\r\n    this._storage.instances[instanceName].push({//add new instance of this type\r\n        \"node\": node,\r\n        \"instance\": instance\r\n    });\r\n\r\n    //this.events.trigger(\"onAddInstance\", instance);\r\n\r\n    return instance;\r\n};\r\n/**\r\n * Remove instance.\r\n * @param {String} instanceName - name of instance class\r\n * @param {Object|String} node - dom node ID\r\n * @returns {boolean}\r\n */\r\nInstancesController.prototype.removeInstance = function (instanceName, node) {\r\n    var instanceObj = this.getInstance(instanceName, node,true),\r\n        key;\r\n    if (!instanceObj) {\r\n        return false;\r\n    }\r\n    instanceObj.instance.die();//avoid memory leak\r\n    key = this._storage.instances[instanceName].indexOf(instanceObj);\r\n    if (key !== -1){//remove key\r\n        this._storage.instances[instanceName].splice(key, 1);\r\n    }\r\n    return true;\r\n};\r\n/**\r\n * Get instance. Return instance object of this dom node\r\n * @param {String} instanceName - name of instance\r\n * @param {Object|String} node - dom node o dome node ID\r\n * @param {boolean} [isReturnObject] - return object or instance\r\n * @returns {boolean}\r\n */\r\nInstancesController.prototype.getInstance = function (instanceName, node, isReturnObject) {//TODO isReturnObject not needed. Refactor and remove\r\n    var typeArr = this._storage.instances[instanceName],\r\n        ret = false;\r\n    if (!typeArr) {\r\n        return false;\r\n    }\r\n    node = (node instanceof HTMLElement) ? node : document.getElementById(node);\r\n    if (!node) {\r\n        return false;\r\n    }\r\n    for (var key = 0, l = typeArr.length; key < l; key++) {//iterate storage and try to find instance\r\n        if (typeArr[key].node === node) {\r\n            ret = (isReturnObject) ? typeArr[key] : typeArr[key].instance;\r\n            break;\r\n        }\r\n    }\r\n    return ret;\r\n};\r\n/**\r\n * Get instances. Return array of instances objects\r\n * @param {String} instanceName - name of instance\r\n * @returns {array|boolean}\r\n */\r\nInstancesController.prototype.getInstances = function (instanceName) {\r\n    return this._storage.instances[instanceName] || false;\r\n};\r\n\r\n\r\n/**\r\n * Register addon for instance\r\n * @param {Function|Object} addon\r\n * @param {String} instanceName name of instance to register addon\r\n * @param {String} addonType type of addon (message,fill,etc)\r\n * @param {String} addonName name of addon (spiral, bootstrap,etc)\r\n */\r\nInstancesController.prototype.registerAddon = function(addon, instanceName, addonType, addonName){\r\n    if (!this._storage.addons.hasOwnProperty(instanceName)){\r\n        this._storage.addons[instanceName] = {};\r\n    }\r\n    if (!this._storage.addons[instanceName].hasOwnProperty(addonType)){\r\n        this._storage.addons[instanceName][addonType] = {};\r\n    }\r\n    if (this._storage.addons[instanceName][addonType].hasOwnProperty(addonName)){\r\n        console.error(\"The %s addon type %s already registered for instance %s! Skipping registration.\",addonName,addonType,instanceName);\r\n        return;\r\n    }\r\n    this._storage.addons[instanceName][addonType][addonName]= addon;\r\n\r\n};\r\n\r\n/**\r\n * Get registered addon\r\n * @param {String} instanceName name of instance to register addon\r\n * @param {String} addonType type of addon (message,fill,etc)\r\n * @param {String} addonName name of addon (spiral, bootstrap,etc)\r\n */\r\nInstancesController.prototype.getInstanceAddon =function(instanceName, addonType, addonName){\r\n    if (!this._storage.addons.hasOwnProperty(instanceName) || !this._storage.addons[instanceName].hasOwnProperty(addonType) || !this._storage.addons[instanceName][addonType].hasOwnProperty(addonName)){\r\n        return false;\r\n    }\r\n    return this._storage.addons[instanceName][addonType][addonName];\r\n};\r\n\r\n\r\n/**\r\n * Get all registered classes\r\n * @returns {Array}\r\n */\r\nInstancesController.prototype.getClasses = function (){\r\n    return Object.keys(this._storage.instancesConstructors.cssClasses);\r\n};\r\n\r\n/**\r\n * For given cssClass return name of instance\r\n * @param {String} cssClass\r\n * @return {*}\r\n */\r\nInstancesController.prototype.getInstanceNameByCssClass = function(cssClass){\r\n    return this._storage.instancesConstructors.cssClasses[cssClass];\r\n};\r\n\r\n/**\r\n * Get constructor by name or class name\r\n */\r\nInstancesController.prototype.getInstanceConstructors = function (name){\r\n\r\n   //TODO\r\n};\r\n\r\nmodule.exports = InstancesController;\r\n","\"use strict\";\r\n\r\n/**\r\n * This plugin adds ability to perform actions from the server.\r\n * \"action\":\"reload\"\r\n * \"action\":{\"redirect\":\"/account\"}\r\n * \"action\":{\"redirect\":\"/account\",\"delay\":3000}\r\n * \"action\":{\"name\":\"redirect\",\"url\":\"/account\",\"delay\":3000}\r\n */\r\nmodule.exports = function (sf) {\r\n    sf.ajax.events.on('load', function (options) {\r\n        var response = options.response;\r\n        if (response.hasOwnProperty('action')) {\r\n            if (typeof response.action === 'string') {//\"action\":\"reload\"\r\n                sf.events.trigger(response.action);\r\n            } else if (typeof response.action === 'object') {\r\n                var keys = Object.keys(response.action);\r\n                if (keys.indexOf('flash') !== -1){\r\n                    var flash = response.action['flash'],\r\n                        timestamp = Date.now(),\r\n                        sfFlashMessage = {};\r\n                    if (typeof response.action['flash'] === 'object'){\r\n                        sfFlashMessage = flash;\r\n                        sfFlashMessage.timestamp = timestamp;\r\n                    } else {\r\n                        sfFlashMessage = {\r\n                            message: flash,\r\n                            timestamp: timestamp\r\n                        }\r\n                    }\r\n                    sessionStorage.setItem('sfFlashMessage', JSON.stringify(sfFlashMessage));\r\n                }\r\n                if (keys.indexOf('redirect') !== -1){\r\n                    setTimeout(function () {\r\n                        sf.events.trigger('redirect', response.action['redirect'], options);\r\n                    }, +response.action.delay|0);\r\n                } else if (keys.indexOf('name') !== -1) {\r\n                    setTimeout(function () {\r\n                        sf.events.trigger(response.action.name, response.action.url);\r\n                    }, +response.action.delay || 0);\r\n                }\r\n                //if (keys.length === 1) {//\"action\":{\"redirect\":\"/account\"}\r\n                //    sf.events.trigger(keys[0], response.action[keys[0]], options);\r\n                //} else if (keys.length === 2 && response.action.delay) {//\"action\":{\"redirect\":\"/account\",\"delay\":3000}\r\n                //    setTimeout(function () {\r\n                //        var action = keys.filter(function (value) {\r\n                //            return value !== 'delay';\r\n                //        })[0];\r\n                //        sf.events.trigger(action, response.action[action], options);\r\n                //    }, +response.action.delay);\r\n                //} else if (keys.length > 1) {//\"action\":{\"name\":\"redirect\",\"url\":\"/account\",\"delay\":3000}\r\n                //    setTimeout(function () {\r\n                //        sf.events.trigger(response.action.name, response.action, options);\r\n                //    }, +response.action.delay || 0);\r\n                //} else {\r\n                //    console.error(\"Action from server. Object doesn't have keys. \", response.action);\r\n                //}\r\n            } else {\r\n                console.error(\"Action from server. Something wrong. \", response.action);\r\n            }\r\n        }\r\n    });\r\n    (function (sfFlashMessage) {\r\n        if (!sfFlashMessage) return;\r\n        var message  = JSON.parse(sfFlashMessage),\r\n            timestamp = Date.now(),\r\n            node,\r\n            nodeWrapper,\r\n            flashClass;\r\n        if (timestamp - message.timestamp > 10000) return;\r\n        if (message.type === 'debug' || message.type === 'success'){\r\n            flashClass = 'debug'\r\n        } else if (message.type === 'info' || !message.type || message.type === 'notice'){\r\n            flashClass = 'info'\r\n        } else {\r\n            flashClass = 'danger'\r\n        }\r\n        node = document.createElement('div');\r\n        nodeWrapper = document.createElement('div');\r\n        nodeWrapper.classList.add('flash-wrapper');\r\n        node.classList.add('flash', flashClass);\r\n        node.innerHTML = message.message;\r\n        document.body.appendChild(nodeWrapper);\r\n        nodeWrapper.appendChild(node);\r\n        setTimeout(function(){nodeWrapper.classList.add('show');}, 1);\r\n        setTimeout(function(){nodeWrapper.classList.remove('show')}, message.timeout||5000);\r\n\r\n        sessionStorage.removeItem('sfFlashMessage');\r\n    }(sessionStorage.getItem('sfFlashMessage')))\r\n};","module.exports = function(events){\r\n    events.on(\"redirect\", function (event) {\r\n        var url = Object.prototype.toString.call(event) === \"[object String]\" ? event : event.url;\r\n        //http://stackoverflow.com/questions/10687099/how-to-test-if-a-url-string-is-absolute-or-relative\r\n        self.location[/^(?:[a-z]+:)?\\/\\//i.test(url) ? 'href' : 'pathname'] = url;\r\n    });\r\n\r\n    events.on('reload', function () {\r\n        location.reload();\r\n    });\r\n\r\n    events.on('refresh', function () {\r\n        events.trigger('reload');\r\n    });\r\n\r\n    events.on('close', function () {\r\n        self.close();\r\n    });\r\n};","\"use strict\";\r\n/**\r\n * Helper to manipulate DOM Events. It's a simple wrapper around \"addEventListener\" but it's store all functions and allow us to remove it all.\r\n * It's very helpful for die() method of instances\r\n * @TODO add to many nodes\r\n * @TODO new method like addEventListener  DOMEvents.on(node(s),event,callback,useCapture);\r\n * @constructor\r\n */\r\nvar DOMEvents = function(){\r\n    /**\r\n     * Internal storage for events\r\n     * @property {Array.<Object>} DOMEvents - dom events array\r\n     * @property {Object} DOMEvents.DOMNode -   DOM node\r\n     * @property {String} DOMEvents.eventType -   Event type\r\n     * @property {Function} DOMEvents.eventFunction -   Function\r\n     * @property {Boolean} DOMEvents.useCapture=false -   useCapture\r\n     * @property {Object} ... -   another object\r\n     * @private\r\n     */\r\n    this._DOMEventsStorage = [];\r\n};\r\n/**\r\n * Add event(s) to node(s).\r\n * @TODO add to many nodes\r\n * @param {Array.<Object>|Object} eventArray - event array or event itself\r\n * @param {Object} eventArray.DOMNode -   DOM node\r\n * @param {String} eventArray.eventType -   Event type\r\n * @param {Function} eventArray.eventFunction -   Function\r\n * @param {Boolean} [eventArray.useCapture=false] -   useCapture\r\n * @example\r\n * var DOMEventsInstance = new DOMEvents();\r\n * var eventOne = {\r\n *      DOMNode: document.getElementById(\"example\"),\r\n *      eventType: \"click\",\r\n *      eventFunction: function (e) {\r\n *          console.log(\"Hi there. Native  DOM events is:\",e);\r\n *      }\r\n * }\r\n *  var eventTwo = {\r\n *      DOMNode: document.getElementById(\"example2\"),\r\n *      eventType: \"mousedown\",\r\n *      eventFunction: function (e) {\r\n *          console.log(\"Hi there. mousedown event. Native  DOM events is:\",e);\r\n *      }\r\n * }\r\n *  DOMEventsInstance.add([eventOne,eventTwo]);\r\n */\r\nDOMEvents.prototype.add = function(eventArray){\r\n    if (Object.prototype.toString.call([]) !== \"[object Array]\"){\r\n        eventArray = [eventArray];\r\n    }\r\n    eventArray.forEach(function(val){\r\n        val.useCapture=!!(val.useCapture);\r\n        val.DOMNode.addEventListener(val.eventType,val.eventFunction,val.useCapture);\r\n        this._DOMEventsStorage.push(val);\r\n    },this)\r\n};\r\n/**\r\n * Remove events\r\n * @param {Array.<Object>} eventArray - event array\r\n * @param {Object} eventArray.DOMNode -   DOM node\r\n * @param {String} eventArray.eventType -   Event type\r\n * @param {Function} eventArray.eventFunction -   Function\r\n * @param {Boolean} [eventArray.useCapture=false] -   useCapture\r\n */\r\nDOMEvents.prototype.remove = function(eventArray){\r\n//TODO IMPLEMENT\r\n    // TODO не уверен что этот метод необходим. если надо часто убирать какието обработчики, то лучше поставить обработчки на родителя\r\n    console.warn(\"TODO IMPLEMENT\");\r\n\r\n};\r\n/**\r\n * Remove all dom events registered with this instance (added by method add)\r\n * @example\r\n * //look at add method as first part of this code\r\n * DOMEventsInstance.removeAll();\r\n */\r\nDOMEvents.prototype.removeAll = function(){\r\n    this._DOMEventsStorage.forEach(function(val){\r\n        val.DOMNode.removeEventListener(val.eventType,val.eventFunction,val.useCapture);\r\n    });\r\n    this._DOMEventsStorage=[];\r\n};\r\n\r\nmodule.exports = DOMEvents;","\"use strict\";\r\n\r\n/**\r\n * This object try to be easy as FormData.\r\n * Please note this is not(!) a shim for Form data, because it's impossible (you should set headers for Ajax by hands)\r\n * It take object and can convert it string like FormData do. Then you can send this string by Ajax or do some other staff.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/FormData\r\n * @param {Object} [data] object with data (supports nested objects)\r\n * @param {String} [boundary] boundary  for Form Data\r\n * @constructor\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"},\"testBoundary\");\r\n * formData.toString();\r\n * // Returns:\r\n * //\"--testBoundary\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * // testValue\r\n * //--testBoundary--\r\n * //\"\r\n *\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"});\r\n * formData.toString();\r\n * // Returns:\r\n * //\"--SpiralFormData-4935309085994959\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * // testValue\r\n * //--SpiralFormData-4935309085994959--\r\n * //\"\r\n *\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"});\r\n * formData.append(\"key2\",\"val2\");\r\n * formData.toString();\r\n * // Returns:\r\n * //--SpiralFormData-988681384595111\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * //testValue\r\n * //--SpiralFormData-988681384595111\r\n * //Content-Disposition: form-data; name=key2\r\n * //\r\n * //val2\r\n * //--SpiralFormData-988681384595111--\r\n * //\"\r\n */\r\nvar LikeFormData = function (data, boundary) {\r\n    this.data = {};\r\n    if (data) {\r\n        if (Object.prototype.toString.call(data) !== \"[object Object]\") {//non object/ Alert developer\r\n            console.warn(\"LikeFormData can't accept non Object. Please reefer to documentation. Problem parameter is:\", data);\r\n        } else {\r\n            this.data = data;\r\n        }\r\n    }\r\n    this.boundary = (boundary) ? boundary : (\"SpiralFormData-\" + Math.random().toString().substr(2));\r\n\r\n\r\n    //if (!isOldIE) {\r\n    //    this.boundary = \"SpiralAjax-\" + Math.random().toString().substr(2);\r\n    //    //xhr.setRequestHeader(\"content-type\", \"multipart/form-data; charset=utf-8; boundary=\" + this.boundary);\r\n    //} else {\r\n    //    this.boundary = \"SpiralAjax-oldIE9876gsloiHGldowu\";\r\n    //}\r\n\r\n};\r\n/**\r\n * Append data to storage. Like standart FormData do.\r\n * @param {String} key\r\n * @param {String} val\r\n * @example\r\n * var formData = new FormData();\r\n * formData.append(\"key2\",\"val2\");\r\n */\r\nLikeFormData.prototype.append = function (key, val) {\r\n    //https://developer.mozilla.org/en-US/docs/Web/API/FormData\r\n    //TODO ***Appends a new value**** onto an existing key inside a FormData object, or adds the key if it does not already exist.\r\n    this.data[key] = val;\r\n};\r\n\r\n/**\r\n * convert to string\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"});\r\n * formData.toString();\r\n * // Returns:\r\n * //\"--SpiralFormData-4935309085994959\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * // testValue\r\n * //--SpiralFormData-4935309085994959--\r\n * //\"\r\n */\r\nLikeFormData.prototype.toString = function () {\r\n    var retString = \"\";\r\n    var boundary = this.boundary;\r\n    var iterate = function (data, partOfKey) {\r\n        for (var key in data) {\r\n            if (data.hasOwnProperty(key) && (typeof data[key] !== \"undefined\" )) {\r\n                if (typeof data[key] === \"object\") {\r\n                    iterate(data[key], ((partOfKey.length === 0) ? key : (partOfKey + \"[\" + key + \"]\")));\r\n                } else {\r\n                    retString += \"--\" + boundary\r\n                        + \"\\r\\nContent-Disposition: form-data; name=\" + ((partOfKey.length === 0) ? key : (partOfKey + \"[\" + key + \"]\"))\r\n                        + \"\\r\\n\\r\\n\" + data[key] + \"\\r\\n\";\r\n                }\r\n            }\r\n        }\r\n    };\r\n    if (typeof this.data !== \"object\") {\r\n        this.data = {\r\n            data: this.data\r\n        }\r\n    }\r\n    iterate(this.data, \"\");\r\n\r\n\r\n    retString += \"--\" + this.boundary + \"--\\r\\n\";\r\n    return retString;\r\n};\r\n\r\n/**\r\n * The delete() method of the FormData interface deletes a key/value pair from a FormData object.\r\n * @param key\r\n */\r\nLikeFormData.prototype.delete = function (key) {\r\n    return delete(this.data[key]);\r\n};\r\n\r\n\r\n/**\r\n *The get() method of the FormData interface returns the first value associated with a given key from within a FormData object.\r\n * @param key\r\n */\r\nLikeFormData.prototype.get = function (key) {\r\n    return this.data[key];\r\n};\r\n/**\r\n *The getAll() method of the FormData interface returns the first value associated with a given key from within a FormData object.\r\n */\r\nLikeFormData.prototype.getAll = function () {\r\n    return this.data;\r\n};\r\n\r\n/**\r\n * The has() method of the FormData interface returns a boolean stating whether a FormData object contains a certain key/value pair.\r\n * @param key\r\n */\r\nLikeFormData.prototype.has = function(key){\r\n    return this.data.hasOwnProperty(key);\r\n};\r\n\r\n/**\r\n * The difference between set() and FormData.append is that if the specified header does already exist, set() will overwrite the existing value with the new one, whereas FormData.append will append the new value onto the end of the set of values.\r\n * @param key\r\n * @param val\r\n */\r\nLikeFormData.prototype.set = function(key, val){\r\n    this.data[key] = val;\r\n};\r\n\r\n/**\r\n * Get content header to set for Ajax. Not a part of standart FormData object. But for sending Like FormData over Ajax you should know header.\r\n * @return {string}\r\n * @example\r\n * var formData = new LikeFormData();\r\n * formData.getContentTypeHeader(); //return \"multipart/form-data; charset=utf-8; boundary=SpiralFormData-988681384595111\"\r\n * @example\r\n * var formData = new LikeFormData({key:\"val2\"},\"testBoundary\");\r\n * formData.getContentTypeHeader(); //return \"multipart/form-data; charset=utf-8; boundary=testBoundary\"\r\n */\r\nLikeFormData.prototype.getContentTypeHeader = function () {\r\n    return \"multipart/form-data; charset=utf-8; boundary=\" + this.boundary;\r\n\r\n};\r\n\r\n\r\nmodule.exports = LikeFormData;","/**\r\n This is a collection of useful DOM tools.\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    /**\r\n     * Found first parent node with matched selector(s)\r\n     * @param {Object} elem - dom node\r\n     * @param {String|Array} selectors - selector or array of selectors\r\n     * @returns {Object| Boolean} - node or false\r\n     */\r\n\r\n    closest: function (elem, selectors) {\r\n        selectors = (typeof selectors === 'string') ? [selectors] : selectors;\r\n        var key,\r\n            l = selectors.length,\r\n            matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\r\n        while (elem && elem.parentNode) {\r\n            for (key = 0; key < l; key++) {\r\n                if (matchesSelector.call(elem, selectors[key])) {\r\n                    return elem;\r\n                }\r\n            }\r\n            elem = elem.parentNode;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * Found first parent node with matched className(s).\r\n     * TODO Why this? Because old IE....\r\n     * TODO It's not good, because it's a copy of closest @see closest. Refactor\r\n     * @param {Object} elem - dom node\r\n     * @param {String|Array} className - className or array of classNames\r\n     * @returns {Object| Boolean} - node or false\r\n     */\r\n\r\n    closestByClassName: function (elem, className) {\r\n        className = (typeof className === 'string') ? [className] : className;\r\n        var key,\r\n            l = className.length;\r\n        //,matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\r\n        while (elem && elem.parentNode) {\r\n            for (key = 0; key < l; key++) {\r\n                var reg = new RegExp(\"(\\\\s|^)\" + className[key] + \"(\\\\s|$)\");\r\n                if (elem.className.match(reg)) {\r\n                    return elem;\r\n                }\r\n            }\r\n            elem = elem.parentNode;\r\n        }\r\n        return false;\r\n    }\r\n};","\"use strict\";\r\n\r\n/**\r\n * @module tools\r\n * @namespace\r\n */\r\nvar tools = {\r\n    resolveKeyPath : function(path, obj, safe) {\r\n        return path.split('.').reduce(function(prev, curr) {\r\n            return !safe ? prev[curr] : (prev ? prev[curr] : void 0)\r\n        }, obj||self)\r\n    }\r\n};\r\n\r\nmodule.exports = tools;","\"use strict\";\r\n//https://github.com/spiral/sf.js\r\n\r\n//Add console shim for old IE\r\nrequire(\"./shim/console\");\r\nrequire(\"./shim/Object.assign\");\r\nif (typeof Promise != 'function') {\r\n    var Promise = require('es6-promise').Promise;\r\n}\r\n\r\nvar _sf;\r\n\r\nif (typeof sf !== 'undefined' && Object.prototype.toString.call(sf) === \"[object Object]\") {\r\n    _sf = Object.assign(sf, require(\"./sf\"));\r\n} else {\r\n    _sf = require(\"./sf\");\r\n}\r\n\r\nif (!_sf.hasOwnProperty('options')) _sf.options = {instances:{}};\r\nif (!_sf.options.hasOwnProperty('instances')) _sf.options.instances = {};\r\n\r\n//todo delete this in future\r\nif (!window.hasOwnProperty(\"sf\")) {//bind only if  window.sf is empty to avoid conflicts with other libs\r\n    window.sf = _sf;\r\n}\r\n\r\n_sf.instancesController = new _sf.core.InstancesController(sf);\r\n_sf.domMutation = new _sf.core.DomMutations(_sf.instancesController);\r\n\r\n//Events system\r\n_sf.events = new _sf.core.Events();\r\nrequire(\"./core/events/baseEvents.js\")(_sf.events);\r\n\r\n//AJAX\r\n_sf.ajax = new _sf.core.Ajax(window.csrfToken ? {//TODO move to spiral bindings\r\n    headers: {\r\n        \"X-CSRF-Token\": window.csrfToken\r\n    }\r\n} : null);\r\nrequire(\"./core/ajax/baseActions.js\")(_sf);\r\n\r\n//API\r\n_sf.createModulePrototype = function() { return Object.create(_sf.modules.core.BaseDOMConstructor.prototype)};\r\n_sf.registerInstanceType = _sf.instancesController.registerInstanceType.bind(_sf.instancesController);\r\n_sf.addInstance = _sf.instancesController.addInstance.bind(_sf.instancesController);\r\n_sf.removeInstance = _sf.instancesController.removeInstance.bind(_sf.instancesController);\r\n_sf.getInstance = _sf.instancesController.getInstance.bind(_sf.instancesController);\r\n_sf.getInstances = _sf.instancesController.getInstances.bind(_sf.instancesController);\r\n\r\n_sf.closest = sf.helpers.domTools.closest;\r\n_sf.resolveKeyPath = sf.tools.resolveKeyPath;\r\n\r\nif (typeof exports === \"object\" && exports) {\r\n    module.exports = _sf;\r\n}","var core = {\r\n    Ajax: require(\"./core/Ajax\"),\r\n    BaseDOMConstructor: require(\"./core/BaseDOMConstructor\"),\r\n    DomMutations: require(\"./core/DomMutations\"),\r\n    Events: require(\"./core/Events\"),\r\n    InstancesController: require(\"./core/InstancesController\")\r\n};\r\n\r\nvar helpers = {\r\n    DOMEvents: require(\"./helpers/DOMEvents\"),\r\n    domTools: require(\"./helpers/domTools\"),\r\n    LikeFormData: require(\"./helpers/LikeFormData\"),\r\n    tools: require(\"./helpers/tools\")\r\n};\r\n\r\nvar sf = {\r\n    core: core,\r\n    helpers: helpers,\r\n    tools: helpers.tools,\r\n    modules: {//todo remove this when removed in dependencies\r\n        'WILL_BE_DEPRECATED': true,\r\n        core: core,\r\n        helpers: helpers\r\n    }\r\n};\r\n\r\nmodule.exports = sf;","/**\r\n * Object.assign polyfill\r\n * https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n */\r\nif (typeof Object.assign != 'function') {\r\n    (function () {\r\n        Object.assign = function (target) {\r\n            'use strict';\r\n            if (target === undefined || target === null) {\r\n                throw new TypeError('Cannot convert undefined or null to object');\r\n            }\r\n\r\n            var output = Object(target);\r\n            for (var index = 1; index < arguments.length; index++) {\r\n                var source = arguments[index];\r\n                if (source !== undefined && source !== null) {\r\n                    for (var nextKey in source) {\r\n                        if (source.hasOwnProperty(nextKey)) {\r\n                            output[nextKey] = source[nextKey];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return output;\r\n        };\r\n    })();\r\n}","/**\r\n * Avoid `console` errors in browsers that lack a console.\r\n */\r\n(function () {\r\n    var method, noop = function () {\r\n        },\r\n        methods = [\r\n            'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\r\n            'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\r\n            'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\r\n            'timeStamp', 'trace', 'warn'\r\n        ],\r\n        length = methods.length,\r\n        console = (window.console = window.console || {});\r\n\r\n    while (length--) {\r\n        method = methods[length];\r\n\r\n        // Only stub undefined methods.\r\n        if (!console[method]) {\r\n            console[method] = noop;\r\n        }\r\n    }\r\n}());\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}